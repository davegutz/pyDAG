#!/usr/bin/env python
"""copire:  Extract useful data from CoPilot .txt output
	-d [level] / --debug [level]
	    Use this verbosity level to debug program  [0]
	-h / --help
		Print this message and exit
	-V, --version
		Print version and quit \n"
Tests:
>>>python copire <infile.txt>
"""

import termios, sys, os
from pyDAG import InFile
import getopt
from string import replace
from string import atoi
from string import atof
from string import count
import time
import datetime
import shutil


# Settings




# Main
def main(argv):

    # Initialize static variables.
    global verbose
    global DATE
    NANval = '-999'
        
    # Initialize
    today    = datetime.date.today()
    DATE     = "Automatically generated by makeBsrc:  %(Y)04i-%(M)02i-%(D)02i" %{'Y': today.year, 'M': today.month, 'D': today.day}

    # Options
    try:
        options, remainder = getopt.getopt(argv, 'd:hV', ['debug=', 'help', 'version'])
    except getopt.GetoptError:
        usage(2)
    for opt, arg in options:
        if opt in ('-d', '--debug'):
            verbose = atoi(arg)
        elif   opt in ('-h', '--help'):
            print usage(1)
        elif opt in ('-V', '--version'):
            print 'copire.py Version 1.0.  DA Gutz 8/10/2010'
            exit(0)
        else: print usage(1)
    if len(remainder) !=1:
           print usage(1)

    # load the one giant file with all mixed data
    filein = remainder[0]
    print 'filein=', filein
    inf = InFile(filein)
    inf.load()
    inf.tokenize(',\t\n ')

    # get variables
    numToks = len(inf.LineS(0))
    var = ['time']
    for j in range(1, numToks-1, 6):
        var.append(inf.token(0, j))
    nVars = len(var)

    # calculate sample intervals.  Will hold longer ones.
    dT  = []
    for j in range(1, (nVars-1)*2, 2):
        dT.append( atof(inf.token(2,j)) - atof(inf.token(1,j)) )
    dTmin  = min(dT)
    incr   = []
    eps    = 1e-6
    for j in range(len(dT)):
        incr.append((dT[j]+eps)//dTmin)

    # write output file .csv until error
    fileout = inf.fileRoot + '.csv'
    outf = open(fileout, 'w')
    for j in range(len(var)):
        outf.write(var[j]+',')
    outf.write('\n')
    numWrote = 0
    for i in range(1, inf.numLines-1, 1):
        outf.write(inf.token(i, 1)+',')
        for j in range(1, nVars):
            index = int((i+1)/incr[j-1])
            jndex = 2*j
            try:
                value = inf.token(index, jndex)
                if count(value, 'NAN'):
                    value = NANval
                outf.write( value + ',' )
            except:
                break
        outf.write('\n')
        numWrote += 1
    outf.close()
    print 'wrote ', numWrote, ' lines'


if __name__=='__main__':
    sys.exit(main(sys.argv[1:]))
 
