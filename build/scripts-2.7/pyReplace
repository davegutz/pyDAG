#!C:\Python27\python.exe
"""Replaces strings in file lists.
Normally call with target and replace strings then file listing.   Optionally
provide a file with file list.

Example:
	pyReplace targetStr sourceStr file

Options:

    -h / --help
        Print this message and exit
    -d / --debug  <e.g. 0>
        Use this verbosity level to debug program
    -l / --list <e.g. "pyReplace.list" a file listing to operate on>
     	example:   pyReplace -l file.lst  targetStr sourceStr
    -V, --version
        Print version and quit \n"
Tests:
>>>pyReplace -d 0
"""
"""
Rev		Author		Date	Description
1.0.		DA Gutz		8/31/11	Release

"""
MYVERSION=1.0
#import cProfile
import getopt
import time
import os
import sys
import shutil

# Initialize static variables.
verbose = 0

# Exceptions
class Error(Exception):
    """Base class for exceptions in this module."""
    pass
class InputError(Error):
    """Exception raised for errors in the input.
    Attributes:
        message -- explanation of the error
    """
    def __init__(self, message, use=0):
        Error.__init__()
        self.message = message
        self.usage = use
    def __str__(self):
        if self.usage:
            return repr(self.message) + '\n\n%(doc)s' % {'doc':  __doc__}
        else:
            return repr(self.message)

def usage(code, msg=''):
    """Usage description"""
    print >> sys.stderr, __doc__
    if msg:
        print >> sys.stderr, msg
    sys.exit(code)





# Replace string in file
def fReplace(stext, rtext, iFile):
    input  = open(iFile)
    output = open('.pyReplaceTempXXX', 'w')
    count  = 0
    for s in input.xreadlines():
        count += s.count(stext)
        output.write(s.replace(stext, rtext))
    input.close()
    output.close()
    if count > 0:
        shutil.move('.pyReplaceTempXXX', iFile)
    else:
    	os.remove('.pyReplaceTempXXX')
    return count



def main(argv):
    """Replace text in files"""
    global verbose

    # Initialize
    LISTFILE=""
    argList=[]

    # Options
    try:
        options, remainder = getopt.getopt(argv, \
          'd:hl:V', \
          ['debug=', 'help', 'list=', 'version'])
    except getopt.GetoptError:
        usage(2, 'getopt error')
    for opt, arg in options:
        if   opt in ('-h', '--help'):
            print 'here'
            usage(1)
        elif opt in ('-d', '--debug'):
            verbose = int(arg)
        elif opt in ('-l', '--list'):
            LISTFILE = arg
        elif opt in ('-V', '--version'):
            print 'pyReplace Version ',MYVERSION,' DA Gutz 8/31/2011 add file list option'
            exit(0)
        else: usage(1, 'uknown')

    if len(remainder) != 2:
	if verbose:
		print 'remainder=', remainder
	usage(1, 'number of string arguments supplied not 2')

    if verbose:
	print 'LISTFILE=', LISTFILE

    if LISTFILE:
	stext = remainder[0]
	rtext = remainder[1]
	f = open(LISTFILE)
	for line in f:
		argList.append(line.strip())
    else:
	stext = remainder[0]
	rtext = remainder[1]
	argList  = remainder
	del argList[0:2]
    	if verbose:
		print 'argList=', argList

    count = 0
    for file in argList:
	countf = fReplace(stext, rtext, file)
	count += countf
	if verbose:
		print 'target=',stext,', replacement=',rtext, ', file=', file, ', count=', countf
    if verbose:
	print 'final count=', count
	
    exit(count)


if __name__ == '__main__':
    #sys.exit(cProfile.run("main(sys.argv[1:])"))
    sys.exit(main(sys.argv[1:]))
